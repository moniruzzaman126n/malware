ISFB is a bot program designed to analyze and modify HTTP traffic on the client's computer.

Supports all 32 and 64 bit Windows, starting with Windows XP.
Supports all 32 and 64 bit versions of Internet Explorer, starting with 6.0.
Supports all 32 and 64 bit versions of Mozilla Firefox.
Supports all 32-bit versions of Google Chrome.

The program is able to install and work without the privileges of the administrator.
Handles all HTTP traffic of the browser including encrypted HTTPS.

The bot is managed from a remote server, using configuration files and commands.
Configuration files and commands are signed using RSA. When receiving files, the bot checks the digital signature,
 and, in case of non-compliance of the signature, the file is ignored.

At the first start the bot initiates a timer. In the future, on a timer, the bot refers to the managing server for the files.

There are 2 ways to find the management server:
- search through the specified list of domain names and select the active one;
- generation of a dynamic list of domain names depending on the current date and system configuration;

Traffic analysis is performed on the basis of a specially generated configuration file, which the bot receives from the server.
Such a file can contain the following instructions:
- substitution of the entire HTML page
- replacement of a fragment of HTML page
- copy the fragment of the page and send it to the server
- find the file by mask and send it to the server
- make a screen shot and send to the server

In addition to the configuration file, the bot receives commands from the server:
GET_CERTS - export and send certificates installed in the Windows system store.
For XP unloads, as well, non-exportable certificates.
GET_COOKIES - collect cookies FF and IE, Flash SOL-files, package them with preservation of structure
directories and send to the server.
CLR_COOKIES - delete cookies FF and IE, SOL-files Flash.
GET_SYSINFO - collect system information: processor type, OS version, process list, list
drivers, the list of installed programs.
KILL - kill the OS (only works with administrator rights)
REBOOT - reboot OS
GROUP = n - change bot group ID to n
LOAD_EXE = URL - download the file from the specified URL and launch it
LOAD_REG_EXE = URL- upload the file from the specified URL, register it in autirun and run
LOAD_UPDATE = URL - load the program update and run
GET_LOG - send the internal log to the server
GET_FILES = * - find all the files matching the specified mask and send to the server
SLEEP = n - stop processing the command queue for n milliseconds. (used for long operations)
SEND_ALL - Send all the data from the queue to send immediately. Otherwise, the data is recovered
by the timer.
LOAD_DLL = URL [, URL] - download the specified DLL URL and inject it into the explorer.exe process.
The first URL for a 32-bit DLL, the second for a 64-bit DLL.

SOCKS_START = IP: PORT - start the server4 (if available)
SOCKS_STOP - stop the x4 \ 5 server

GET_KEYLOG - send the data of the keylogger (if available)
GET_MAIL - activate grabber E-Mail (if available) and send received data from it
GET_FTP - activate FTP grabber (if available) and send data received from it

SELF_DELETE - remove software from the system, including all files and registry keys

URL_BLOCK = URL - block access to all URLs that match the specified mask
URL_UNBLOCK = URL - Unblock access to the URL that matches the specified mask, previously blocked by the URL_BLOCK command
FORMS_ON - enable the HTTP form grabber (if there is a _ALWAYS_HTTPS define, then the HTTPs grabber is always on)
FORMS_OFF - disable the HTTP form grabber
KEYLOG_ON [= list] - enable the keylog for the specified process list
KEYLOG_OFF - disable the keylogger
LOAD_INI = URL - load the packed INI-file from the specified URL, save it in the registry and use it instead of the INI-file,
attached to the software with the help of the builder. The INI file must be packed and signed.

LOAD_REG_DLL = name, URL [, URL] - upload the DLL to the specified URL, save it under the specified name and register for
automatic boot after each system startup
UNREG_DLL = name - remove from automatic load DLL with given name

Technical details

Dropper - installation program.
The dropper is a Windows executable (PE32). In the file, in the form of a binary resource, are contained
two packed DLL: 32-bit and 64-bit bot.
At startup, the dropper decompresses the DLL and registers them for autorun.
DLLs are unpacked and registered in such a way that they can be executed at any level of privileges:
 both with the administrator and with the user.

DLL - bot.
A bot is a dynamically loadable library (DLL). For each architecture, its own corresponding DLL is compiled.
The DLL bot is loaded into all the processes that are started.
The bot consists of 2 logical components: the parser and the server. The parser is activated in the context of the browser process.
The server is activated in the context of the shell process (typically exp